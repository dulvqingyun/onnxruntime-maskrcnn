import onnx
import onnxsim
import torch 
import torchvision
import onnxruntime
import cv2
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches


def preprocess(image):
    # Resize
    ratio = 800.0 / min(image.shape[1], image.shape[0])
    #image = image.resize((int(ratio * image.size[0]), int(ratio * image.size[1])), Image.BILINEAR)
    ss = int(ratio * image.shape[1])
    dd = image.shape[1]
    ll = int(ratio * image.shape[0])
    image = cv2.resize(image, (ss, ll))
    # Convert to BGR
    #image = np.array(image)[:, :, [2, 1, 0]].astype('float32')
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
    image2 = np.array(image).astype('float32')
    mean_vec = np.array([102.9801, 115.9465, 122.7717])
    for i in range(image2.shape[2]):
        image2[:, :, i] = image2[:, :, i] - mean_vec[i]
    #my = image2.shape
    import math
    
    padded_h = int(math.ceil(image2.shape[0] / 32) * 32)
    padded_w = int(math.ceil(image2.shape[1] / 32) * 32)
    image = cv2.resize(image2,(padded_w,padded_h))
    
    # HWC -> CHW
    image2 = np.zeros((3,padded_h,padded_w),dtype=np.float32)
    
    for i in range(3):
        for j in range(padded_h):
            for k in range(padded_w):
                image2[i][j][k]=image[j][k][i]
    #image = np.transpose(image, [2, 0, 1])
    my = image2.shape
    # Normalize
    

    # #Pad to be divisible of 32
    # import math
    # padded_h = int(math.ceil(image2.shape[1] / 32) * 32)
    # padded_w = int(math.ceil(image2.shape[2] / 32) * 32)

    # padded_image = np.zeros((3, padded_h, padded_w), dtype=np.float32)
    # padded_image[:, :image2.shape[1], :image2.shape[2]] = image2
    # image = padded_image
    #image = cv2.resize(image2,(padded_h,padded_w))

    return image2

def display_objdetect_image(image, boxes, labels, scores, masks, score_threshold=0.7):
    # Resize boxes
    ratio = 800.0 / min(image.shape[1], image.shape[0])
    boxes /= ratio

    _, ax = plt.subplots(1, figsize=(12,9))

    image = np.array(image)
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
    for mask, box, label, score in zip(masks, boxes, labels, scores):
        # Showing boxes with score > 0.7
        if score <= score_threshold:
            continue

        # Finding contour based on mask
        mask = mask[0, :, :, None]
        int_box = [int(i) for i in box]
        mask = cv2.resize(mask, (int_box[2]-int_box[0]+1, int_box[3]-int_box[1]+1))
        mask = mask > 0.5
        im_mask = np.zeros((image.shape[0], image.shape[1]), dtype=np.uint8)
        x_0 = max(int_box[0], 0)
        x_1 = min(int_box[2] + 1, image.shape[1])
        y_0 = max(int_box[1], 0)
        y_1 = min(int_box[3] + 1, image.shape[0])
        mask_y_0 = max(y_0 - box[1], 0)
        mask_y_1 = mask_y_0 + y_1 - y_0
        mask_x_0 = max(x_0 - box[0], 0)
        mask_x_1 = mask_x_0 + x_1 - x_0
        im_mask[y_0:y_1, x_0:x_1] = mask[
            mask_y_0 : mask_y_1, mask_x_0 : mask_x_1
        ]
        im_mask = im_mask[:, :, None]

        # OpenCV version 4.x
        contours, hierarchy = cv2.findContours(
            im_mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE
        )

        image = cv2.drawContours(image, contours, -1, 25, 3)

        rect = patches.Rectangle((box[0], box[1]), box[2] - box[0], box[3] - box[1], linewidth=1, edgecolor='b', facecolor='none')
        ax.annotate(classes[label] + ':' + str(np.round(score, 2)), (box[0], box[1]), color='w', fontsize=12)
        ax.add_patch(rect)

    ax.imshow(image)
    plt.show()

img = cv2.imread('D:\\maskrcnn-benchmark-onnx\\demo\\frcnn_demo.jpg',cv2.IMREAD_COLOR)
#img = Image.open('C:\\Users\\lcm\\Downloads\\maskrcnn-benchmark-onnx_stage\\maskrcnn-benchmark-onnx_stage\\demo\\frcnn_demo.jpg')
print(img.shape[0],img.shape[1])
img_data = preprocess(img)
sess = onnxruntime.InferenceSession('C:\\Users\\lcm\\Downloads\\mask_rcnn_R_50_FPN_1x.onnx')
#output = sess.run([output_nodes], {input_nodes: x})

ort_inputs = {sess.get_inputs()[0].name: img_data} #类似tensorflow的传入数据，有几个输入就写几个
boxes, labels, scores, masks = sess.run(None, ort_inputs)
print(masks.shape)
#print(boxes)
print("onnx model simplify Ok!")
classes = [line.rstrip('\n') for line in open('C:\\Users\\lcm\\Downloads\\coco_classes.txt')]
display_objdetect_image(img, boxes, labels, scores, masks)
