#include <windows.h>
#include <windowsx.h>
#include "opencv.hpp" //opencv 的头文件
#include <opencv2/core/core.hpp>  
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>  
#include <opencv2/imgproc/imgproc.hpp> 
#include "stdafx.h"
#include <vector>
#include <stdlib.h> 
#include <iostream> 
#include <algorithm>
#include <fstream>
#include <assert.h>
#include <iomanip>
#include <onnxruntime_cxx_api.h>
#include <cuda_provider_factory.h>
#include <onnxruntime_c_api.h>
#include <math.h>
using namespace std;

const int IMAGE_SHAPE = 512;
const int RPN_ANCHOR_STRIDE = 1;
const int GPU_COUNT = 1;
const int BATCH_SIZE = RPN_ANCHOR_STRIDE * GPU_COUNT ;
const float THRESHOLD = 0.5;
std::vector<Ort::Value> ort_inputs;
std::array<float, 3> MEAN_PIXEL = { 123.7, 116.8, 103.9 };
std::array<int, 5> BACKBONE_STRIDES = { 4, 8, 16, 32, 64 };
std::array<float, 5> RPN_ANCHOR_SCALES = { 8 * 6, 16 * 6, 32 * 6, 64 * 6, 128 * 6 };
std::array<float, 3> RPN_ANCHOR_RATIOS = { 0.5, 1.0, 2.0 };
std::array<float, 14> input_meta_ = { 0, 512, 512, 3, 512, 512, 3, 0, 0, 512, 512, 1, 0, 0 };
std::array<float, 1 * 512 * 512 * 3> input_images_{};
std::array<float, 1 * 65472 * 4> input_anchors_{};
std::vector<int64_t> anchors_dim = { 1, 65472, 4 };
std::vector<int64_t> images_dim = { 1, 512, 512, 3 };
std::vector<int64_t> metas_dim = { 1, 14 };
Ort::Value anchors_input_tensor_{ nullptr };
Ort::Value images_input_tensor_{ nullptr };
Ort::Value metas_input_tensor_{ nullptr };

int** CreateINTgArray(int colcount, int rowcount) {
	int** strMsg = new int * [colcount];
	for (int i = 0; i < colcount; i++)
	{
		strMsg[i] = new int[rowcount];
	}
	return strMsg;
}
float** CreateFLOATgArray(int colcount, int rowcount) {
	float** strMsg = new float* [colcount];
	for (int i = 0; i < colcount; i++)
	{
		strMsg[i] = new float[rowcount];
	}
	return strMsg;
}
bool** CreateBOOLgArray(int colcount, int rowcount) {
	bool** strMsg = new bool* [colcount];
	for (int i = 0; i < colcount; i++)
	{
		strMsg[i] = new bool[rowcount];
	}
	return strMsg;
}
bool*** CreateBOOL3DMask(int dim_1, int dim_2, int dim_3) {
	bool*** Mask = new bool** [dim_1];
	for (int x = 0; x < dim_1; x++)
	{
		Mask[x] = new bool* [dim_2];
		for (int y = 0; y < dim_2; y++)
		{
			Mask[x][y] = new bool[dim_3];
		}
	}
	return Mask;
}
float*** CreateFLOAT3DMask(int dim_1, int dim_2, int dim_3) {
	float*** Mask;
	Mask = new float** [dim_1];
	for (int x = 0; x < dim_1; x++)
	{
		Mask[x] = new float* [dim_2];
		for (int y = 0; y < dim_2; y++)
		{
			Mask[x][y] = new float [dim_3];
		}
	}
	return Mask;
}
int*** CreateINT3DMask(int dim_1, int dim_2, int dim_3) {
	int*** Mask;
	Mask = new int** [dim_1];
	for (int x = 0; x < dim_1; x++)
	{
		Mask[x] = new int* [dim_2];
		for (int y = 0; y < dim_2; y++)
		{
			Mask[x][y] = new int[dim_3];
		}
	}
	return Mask;
}
float**** CreateFLOAT4DMask(int dim_1, int dim_2, int dim_3, int dim_4) {
	float**** Mask;
	Mask = new float*** [dim_1];
	for (int x = 0; x < dim_1; x++)
	{
		Mask[x] = new float** [dim_2];
		for (int y = 0; y < dim_2; y++)
		{
			Mask[x][y] = new float* [dim_3];
			for (int z = 0; z < dim_3; z++) {
				Mask[x][y][z] = new float[dim_4];
			}
		}
	}
	return Mask;
}
void DeleteINTArray(int size, int** pstr)
{
	for (int i = 0; i < size; i++)
	{
		delete[]  pstr[i];   // 要在指针前加[] ， 否则的话 只释放p[i]所指的第一个单元所占的空间
	}
}
void DeleteFLOATArray(int size, float** pstr)
{
	for (int i = 0; i < size; i++)
	{
		delete[]  pstr[i];   
	}
}
bool** unmold_mask(float** mask,int* bbox) {
	int y1 = bbox[0];
	int x1 = bbox[1];
	int y2 = bbox[2];
	int x2 = bbox[3];

	cv::Mat mask_(28, 28, CV_32FC1);
	for (int i = 0; i < 28; i++) {
		for (int j = 0; j < 28; j++) {
			mask_.at<float>(i,j) = mask[i][j];
		}
	}
	cv::Mat mask_re;
	cv::resize(mask_, mask_re, cv::Size(x2 - x1, y2 - y1));
	bool** mask_bool = CreateBOOLgArray(mask_re.size[0], mask_re.size[1]);
	for (int i = 0; i < mask_re.size[0]; i++){
		for (int j = 0; j < mask_re.size[1]; j++) {
			if ((float)mask_re.at<float>(i , j) >= THRESHOLD) {
				mask_bool[i][j] = TRUE;
			}
			else{ mask_bool[i][j] = FALSE; }
		}
	}
	
	bool** full_mask = CreateBOOLgArray(IMAGE_SHAPE, IMAGE_SHAPE);
	for (int i = 0; i < IMAGE_SHAPE; i++) {
		for (int j = 0; j < IMAGE_SHAPE; j++) {
			full_mask[i][j] = FALSE;
		}
	}
	for (int i = y1; i < y2; i++) {
		for (int j = x1; j < x2; j++) {
			full_mask[i][j] = mask_bool[i-y1][j-x1];
		}
	}
	return full_mask;
}
bool*** unmold_detections(float detection[100][6], float**** mrcnn_mask) {
	int N = 0;
	for (int i = 0; i < 100; i++) {
		if (detection[i][4] == 0) { N = i + 1; break; }
	}
	float** boxes = CreateFLOATgArray(N, 4);
	for (int i = 0; i < N; i++){
		for (int j = 0; j < 4; j++) {
			boxes[i][j] = detection[i][j];
		}
	}
	int** class_ids = CreateINTgArray(N, 1);
	for (int i = 0; i < N; i++) {
		class_ids[i][0] = floor(detection[i][4]);
	}
	float** scores = CreateFLOATgArray(N, 1);
	for (int i = 0; i < N; i++) {
		scores[i][0] = detection[i][5];
	}
	float*** masks = CreateFLOAT3DMask(N, 28, 28);
		for (int i = 0; i < N; i++) {
			int id = class_ids[i][0];
			for (int j = 0; j < 28; j++) {
				for (int k = 0; k < 28; k++) {
					masks[i][j][k] = mrcnn_mask[i][j][k][id];
				}
			}
		}
	std::array<int, 4> scale = { 511,511,511,511 };
	std::array<int, 4> shift = { 0,0,1,1 };
	int** boxes_ = CreateINTgArray(N, 4);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < 4; j++) {
			boxes_[i][j] = round(boxes[i][j] * scale[j] + shift[j]);
		}
	}
	bool*** full_masks = CreateBOOL3DMask(N, IMAGE_SHAPE, IMAGE_SHAPE);
	for (int i = 0; i < N; ++i) {
		bool** mask_per = unmold_mask(masks[i], boxes_[i]);
		for (int j = 0; j < IMAGE_SHAPE; j++) {
			for (int k = 0; k < IMAGE_SHAPE; k++) {
				full_masks[i][j][k] = mask_per[j][k];
			}
		}
		delete[] mask_per;
		mask_per = NULL;
	}
	return full_masks;
}
int GetObjectNumber(float detection[100][6]) {
	int N = 0;
	for (int i = 0; i < 100; i++) {
		if (detection[i][4] == 0) { N = i + 1; break; }
	}
	cout << N << " objects detected." << endl;
	return N;
}
int main(){

	Ort::Env env(ORT_LOGGING_LEVEL_WARNING, "test");
	Ort::SessionOptions session_options;
	const wchar_t* model_path = L"D:\\onnxruntime-projects-master\\test_models\\my_mrcnn.onnx";
	printf("Using Onnxruntime C++ API\n");
	Ort::Session session(env, model_path, session_options);
	auto allocator_info = Ort::MemoryInfo::CreateCpu(OrtArenaAllocator, OrtMemTypeDefault);

	///////////////1.Prepare for the "input_image"//////////////////

	cv::Mat img = cv::imread("D:\\Mask_RCNN-master\\images_4\\01019_img_28.jpg",cv::IMREAD_COLOR);
	if (img.rows!= IMAGE_SHAPE && img.cols != IMAGE_SHAPE)
	{
		cout << "The input's shape is invalid!" << endl; // We only accept fixed size now.
		return -1;
	}
	cv::Mat img_;
	img.convertTo(img_, CV_32FC3);
	for (int i = 0; i < IMAGE_SHAPE; i++) {
				for (int j = 0; j < IMAGE_SHAPE; j++) {
					img_.at<cv::Vec3f>(i, j)[0] -= MEAN_PIXEL[0];
					img_.at<cv::Vec3f>(i, j)[1] -= MEAN_PIXEL[1];
					img_.at<cv::Vec3f>(i, j)[2] -= MEAN_PIXEL[2];
				}
			}
	float* image_output = input_images_.data();
	fill(input_images_.begin(), input_images_.end(), 0.f);
	for (int c = 0; c < IMAGE_SHAPE; c++) {
		for (int i = 0; i < IMAGE_SHAPE; i++) {
			for (int j = 0; j < 3; j++) {
					image_output[c * IMAGE_SHAPE * 3 + i * 3 + j] = (img_.ptr<float>(c)[i * 3 + j]);//Transfer cv::Mat to std::array.
			}
		}
	}
	images_input_tensor_ = Ort::Value::CreateTensor<float>(allocator_info, input_images_.data(), input_images_.size(), images_dim.data(), images_dim.size());
    //float** my = generate_anchors(48.0, 128, 4);

	/////////////////2.Prepare for the "input_anchors"/////////////////

	std::ifstream data("D:\\Mask_RCNN-master\\anchors.txt");
	float* anchors_output = input_anchors_.data();
	fill(input_anchors_.begin(), input_anchors_.end(), 0.f);
	for (int c = 0; c < 1; c++) {
				for (int i = 0;i < 65472;i++) {
					for (int j = 0;j < 4;j++) {
						data >> setprecision(20) >> anchors_output[c*65472*4 + i*4 + j]; //We load the matrix from TXT for the calculation process of anchors
						                                                                 //is too complex to be tranferred from Python.
					}
				}
			}
    anchors_input_tensor_ = Ort::Value::CreateTensor<float>(allocator_info, input_anchors_.data(), input_anchors_.size(), anchors_dim.data(), anchors_dim.size());
	
	/////////////////3.Prepare for the "input_image_meta"/////////////////

	metas_input_tensor_ = Ort::Value::CreateTensor<float>(allocator_info, input_meta_.data(), input_meta_.size(), metas_dim.data(), metas_dim.size());
	
	/////////////////4.Prepare for the model Inputs & Outputs indications/////////////////

	ort_inputs.push_back(std::move(images_input_tensor_));
	ort_inputs.push_back(std::move(metas_input_tensor_));
	ort_inputs.push_back(std::move(anchors_input_tensor_));

	std::vector<const char*> input_names = { "input_image", "input_image_meta", "input_anchors" };
	const char* const output_names[] = { "mrcnn_detection", "mrcnn_class", "mrcnn_bbox" , "mrcnn_mask", "ROI", "rpn_class", "rpn_bbox"};

	double timeStart = (double)cv::getTickCount();
	std::vector<Ort::Value> ort_outputs = session.Run(Ort::RunOptions{ nullptr }, input_names.data(),
	ort_inputs.data(), ort_inputs.size(),
	output_names, 7);
	double nTime = ((double)cv::getTickCount() - timeStart) / cv::getTickFrequency();
	cout << "running time ：" << nTime << "sec\n" << endl;
	
	/////////////////5.Get Outputs and check them/////////////////
	auto type_info = ort_outputs[0].GetTensorTypeAndShapeInfo();
	std::vector<int64_t> shape = type_info.GetShape();
	float detection[100][6];
	float* detection_output_data = ort_outputs[0].GetTensorMutableData<float>();
	float* mask_output_data = ort_outputs[3].GetTensorMutableData<float>();

	for (int i = 0; i < 100; i++) {
		for (int j = 0; j < 6; j++) {
			detection[i][j] = detection_output_data[i * 6 + j];
		}
	}
	float**** mrcnn_mask = CreateFLOAT4DMask(100, 28, 28, 2);
	for (int i = 0; i < 100; i++) {
		for (int j = 0; j < 28; j++) {
			for (int k = 0; k < 28; k++) {
				for (int l = 0; l < 2; l++) {
					mrcnn_mask[i][j][k][l] = mask_output_data[i * 28 * 28 * 2 + j * 28 * 2 + k * 2 + l];
				}
			}
		}
	}
	int N = GetObjectNumber(detection);
	bool*** masks = unmold_detections(detection, mrcnn_mask);
	int*** masks_ = CreateINT3DMask(N, 512, 512);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < 512; j++) {
			for (int k = 0; k < 512; k++) {
				masks_[i][j][k] = masks[i][j][k];
			}
		}
	}
	cv::Mat mask(512,512,CV_32FC1);
	for (int i = 0; i < N; ++i) {

		for (int l = 0; l < 512;l++) {
			for (int c = 0; c < 512; c++) {
				if (masks[i][l][c] == TRUE) {
					cout << "oh" << endl;
					mask.at<float>(l, c) = 255.0;
				}
				
			}
		}
		cv::imwrite("D:\\Mask_RCNN-master\\my_mask.jpg", mask);
		//cv::Mat final_mask;
		//mask.convertTo(final_mask, CV_8UC1);
		/*vector<vector<cv::Point>> contours;
		vector<cv::Vec4i> hierarchy;
		cv::findContours(final_mask, contours, hierarchy, cv::RETR_TREE, cv::CHAIN_APPROX_SIMPLE);
		drawContours(img, contours, -1,cv::Scalar(255,255,255));*/
	}
	/*cv::namedWindow("dst", 0);
	cv::imshow("dst", img);
	cv::waitKey();*/
	return 0;
}

